% Permission checkers
% ==================================

% The only 3 forms of checkSelfPermission().
% There are also methods like checkPermission(), but they were not encountered in real-life apps yet.

<android.content.Context: int checkSelfPermission(java.lang.String )> -> _PERM_CHECKER_
<android.support.v4.content.ContextCompat: int checkSelfPermission(android.content.Context,java.lang.String )> -> _PERM_CHECKER_

% Used by some methods in Android compat framework.
<android.support.v4.content.PermissionChecker: int checkSelfPermission(android.content.Context,java.lang.String )> -> _PERM_CHECKER_

% WRITE_EXTERNAL_STORAGE
% ==================================

% <java.io.FileOutputStream: void <init>(java.io.FileDescriptor)> -> WRITE_EXTERNAL_STORAGE
% <java.io.FileOutputStream: void <init>(java.io.File,boolean)> -> WRITE_EXTERNAL_STORAGE
% <java.io.FileOutputStream: void <init>(java.lang.String)> -> WRITE_EXTERNAL_STORAGE
% <java.io.FileOutputStream: void <init>(java.lang.String,boolean)> -> WRITE_EXTERNAL_STORAGE
% <java.io.FileOutputStream: void <init>(java.io.File)> -> WRITE_EXTERNAL_STORAGE

% <java.io.FileWriter: void <init>(java.io.FileDescriptor)> -> WRITE_EXTERNAL_STORAGE
% <java.io.FileWriter: void <init>(java.io.File,boolean)> -> WRITE_EXTERNAL_STORAGE
% <java.io.FileWriter: void <init>(java.lang.String)> -> WRITE_EXTERNAL_STORAGE
% <java.io.FileWriter: void <init>(java.lang.String,boolean)> -> WRITE_EXTERNAL_STORAGE
% <java.io.FileWriter: void <init>(java.io.File)> -> WRITE_EXTERNAL_STORAGE

% LOCATION
% ==================================

<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void addProximityAlert(double, double, float, long, android.app.PendingIntent)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void requestLocationUpdates(java.lang.String, long, float, android.app.PendingIntent)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener, android.os.Looper)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void requestLocationUpdates(long, float, android.location.Criteria, android.app.PendingIntent)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void requestLocationUpdates(long, float, android.location.Criteria, android.location.LocationListener, android.os.Looper)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria, android.app.PendingIntent)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria, android.location.LocationListener, android.os.Looper)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void requestSingleUpdate(java.lang.String, android.app.PendingIntent)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: void requestSingleUpdate(java.lang.String, android.location.LocationListener, android.os.Looper)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> -> ACCESS_FINE_LOCATION
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> -> ACCESS_FINE_LOCATION

% UNCERTAIN - It is uncertain whether this one is a sensitive.
% Some apps check permissions before calling it, some apps don't.
% <android.location.LocationManager: void removeUpdates(android.location.LocationListener)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION

% LOCATION - com.google.android.gms.location.FusedLocationProviderApi
% ----------------------------------

<com.google.android.gms.location.FusedLocationProviderApi: android.location.Location getLastLocation(com.google.android.gms.common.api.GoogleApiClient)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.location.LocationAvailability getLocationAvailability(com.google.android.gms.common.api.GoogleApiClient)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationRequest, com.google.android.gms.location.LocationListener)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationRequest, com.google.android.gms.location.LocationListener, android.os.Looper)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationRequest, com.google.android.gms.location.LocationCallback, android.os.Looper)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.LocationRequest, android.app.PendingIntent)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult setMockMode(com.google.android.gms.common.api.GoogleApiClient, boolean)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult setMockLocation(com.google.android.gms.common.api.GoogleApiClient, android.location.Location)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION


% LOCATION - com.google.android.gms.maps.GoogleMap
% ----------------------------------
<com.google.android.gms.maps.GoogleMap: void setMyLocationEnabled(boolean)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION


% LOCATION - android.webkit.WebSettings
% ----------------------------------
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)> -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION


% CAMERA
% ==================================

<android.hardware.camera2.CameraManager: void openCamera(java.lang.String, android.hardware.camera2.CameraDevice$StateCallback, android.os.Handler)> -> CAMERA

% CAMERA - undocumented
% ----------------------------------
<android.hardware.Camera: android.hardware.Camera open()> -> CAMERA
<android.hardware.Camera: android.hardware.Camera open(int)> -> CAMERA
<android.provider.MediaStore: ACTION_IMAGE_CAPTURE> -> CAMERA

% GET_ACCOUNTS
% ==================================

<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler)> -> GET_ACCOUNTS
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler)> -> GET_ACCOUNTS
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> -> GET_ACCOUNTS
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> -> GET_ACCOUNTS
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener, android.os.Handler, boolean)> -> GET_ACCOUNTS


% READ_PHONE_STATE
% ==================================

<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String)> -> READ_PHONE_STATE
<android.telecom.TelecomManager: boolean isInCall()> -> READ_PHONE_STATE
<android.telecom.TelecomManager: boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle, java.lang.String)> -> READ_PHONE_STATE
<android.telecom.TelecomManager: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle)> -> READ_PHONE_STATE
<android.telecom.TelecomManager: java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle)> -> READ_PHONE_STATE
<android.telecom.TelecomManager: java.util.List  getCallCapablePhoneAccounts()> -> READ_PHONE_STATE
<android.telecom.TelecomManager: void showInCallScreen(boolean)> -> READ_PHONE_STATE


% App-specific or Lib-specific sensitives
% ==================================

